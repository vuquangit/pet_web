name: CI/CD

on:
  push:
      branches-ignore:
          - main

env:
  NODE_VERSION: 20
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Install dependencies
        run: yarn install

      - name: Cypress run
        id: cypress
        continue-on-error: true
        uses: cypress-io/github-action@v6
        with:
          start: yarn test:e2e:ci
          wait-on: 'http://localhost:3000' # Waits for above
        env:
          AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
          AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
          AUTH_ACCESS_TOKEN: ${{ secrets.AUTH_ACCESS_TOKEN }}
          AUTH_REFRESH_TOKEN: ${{ secrets.AUTH_REFRESH_TOKEN }}

      - name: Set message if code frontend fail
        if: steps.cypress.outcome == 'failure'
        run: echo "fe_failed_message=[NEWS] Some test in frontend fail" >> $GITHUB_ENV

      - name: Notify to slack if code fail
        if: steps.cypress.outcome == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL:  pet-bots
          SLACK_COLOR:    '#ff0000'
          SLACK_ICON:     https://www.petisland.icu/favicon.ico
          SLACK_MESSAGE:  ${{ env.fe_failed_message }}
          SLACK_TITLE:    CI Message
          SLACK_USERNAME: Pet NEWS - Github Action
          SLACK_WEBHOOK:  ${{ secrets.SLACK_WEBHOOK }}

      # Break CI pipeline when error occur
      - name: Exit if fail
        if: steps.cypress.outcome == 'failure'
        run: exit 1

  cd:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/develop' && success()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup file
        run: |
          cp .env.staging.sample .env.staging
          echo APP_API_ENDPOINT=${{ secrets.APP_API_ENDPOINT }} >> .env.staging
          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env.staging
          echo GOOGLE_CLIENT_REDIRECT_URL=${{ secrets.GOOGLE_CLIENT_REDIRECT_URL }} >> .env.staging
          echo GOOGLE_CLIENT_REDIRECT_URL_CALLBACK=${{ secrets.GOOGLE_CLIENT_REDIRECT_URL_CALLBACK }} >> .env.staging

      - name: Install Vercel CLI
        run: yarn global add vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=staging --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      # Set message env for success or failure
      - if: success()
        name: Set message for success
        run: |
          echo "message=Congratulations on your successful release for PRODUCTION :rocket:" >> $GITHUB_ENV
          echo "message_color=good" >> $GITHUB_ENV

      - if: failure()
        name: Set message for failure
        run: |
          echo "message=Release PRODUCTION failed, Please try again or release manually :uongtra:" >> $GITHUB_ENV
          echo "message_color=danger" >> $GITHUB_ENV

      # Noti to slack for sucess or failure
      - name: Notify to slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL:  pet-bots
          SLACK_COLOR:    ${{ env.message_color }}
          SLACK_ICON:     https://www.petisland.icu/favicon.ico
          SLACK_MESSAGE:  ${{ env.message }}
          SLACK_TITLE:    CD Message
          SLACK_USERNAME: Pet NEWS - Github Action
          SLACK_WEBHOOK:  ${{ secrets.SLACK_WEBHOOK }}
