name: CI/CD

on: [push]

env:
  NODE_VERSION: 20

jobs:
  ci:
    runs-on: ubuntu-latest

    # Runs tests in parallel with matrix strategy https://docs.cypress.io/guides/guides/parallelization
    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    # Also see warning here https://github.com/cypress-io/github-action#parallel
    strategy:
      fail-fast: false # https://github.com/cypress-io/github-action/issues/48
      # matrix:
      #   containers: [1, 2] # Uses 2 parallel instances

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Install dependencies
        run: yarn install

      - name: Cypress run
        id: cypress
        # Uses the official Cypress GitHub action https://github.com/cypress-io/github-action
        uses: cypress-io/github-action@v6
        with:
          # Starts web server for E2E tests - replace with your own server invocation
          # https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server
          # start: npm start
          start: yarn test:e2e:ci
          wait-on: 'http://localhost:3000' # Waits for above

          # Records to Cypress Cloud
          # https://docs.cypress.io/guides/cloud/projects#Set-up-a-project-to-record
          # record: true
          # parallel: true # Runs test in parallel using settings above

        env:
          # GitHub repo → Settings → Secrets → Actions
          AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
          AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
          AUTH_ACCESS_TOKEN: ${{ secrets.AUTH_ACCESS_TOKEN }}
          AUTH_REFRESH_TOKEN: ${{ secrets.AUTH_REFRESH_TOKEN }}

          # For recording and parallelization to work you must set your CYPRESS_RECORD_KEY
          # CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

          # Creating a token https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set message if code frontend fail
        if: steps.cypress.outcome == 'failure'
        run: echo "fe_failed_message=[NEWS] Some test in frontend fail" >> $GITHUB_ENV

      - name: Notify to slack if code fail
        if: steps.cypress.outcome == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL:  pet-bots
          SLACK_COLOR:    '#BD7532'
          SLACK_ICON:     https://www.petisland.icu/favicon.ico
          SLACK_MESSAGE:  ${{ env.fe_failed_message }}
          SLACK_TITLE:    CI Message
          SLACK_USERNAME: Pet NEWS - Github Action
          SLACK_WEBHOOK:  ${{ secrets.WEBHOOK }}

      # Break CI pipeline when error occur
      - name: Exit if fail
        if: steps.cypress.outcome == 'failure'
        run: exit 1

  cd:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/develop' && success()

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: yarn global add vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ env.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ env.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }}

      # Set message env for success or failure
      - if: success()
        run: echo "message=Congratulations on your successful release for develop :rocket:" >> $GITHUB_ENV

      - if: failure()
        run: echo "message=Release develop failed, Please try again or release manually :uongtra:" >> $GITHUB_ENV

      # Noti to slack for sucess or failure
      - name: Notify to slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL:  pet-bots
          SLACK_COLOR:    '#32BD52'
          SLACK_ICON:     https://www.petisland.icu/favicon.ico
          SLACK_MESSAGE:  ${{ env.message }}
          SLACK_TITLE:    CD Message
          SLACK_USERNAME: Pet NEWS - Github Action
          SLACK_WEBHOOK:  ${{ secrets.WEBHOOK }}
